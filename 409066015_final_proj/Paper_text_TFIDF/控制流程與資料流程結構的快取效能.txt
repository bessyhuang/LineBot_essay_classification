控制流程與資料流程結構的快取效能
Cache Performance of Data Flow Control Flow Architecture
快取記憶體、快取效能、可排程資料流程架構
資料流程結構的指令參考動作與一般傳統的系統並不相同。在資料流程的環境之下，程式的執行是靠資料來驅動的，因此資料流程將相依於資料參考的動作。可排程資料流程架構(Scheduled data flow)是一種獨特的結構，其基於資料流程的範例下使用非阻隔式多執行緒(non-blocking multithread)與退耦式(decoupled)的存取模型。資料流程架構的平行運算與依循資料流執行的特性，使其對資料的參考成為二維模式，而這種參考模式與傳統的循序執行模式比較起來更有效率也更加複雜。這個研究比較了資料流程與控制流程的混合結構與現行常見的結構的快取效能。使用非阻隔式多執行緒的模型將程式切割成多個不同的程式區段，而資料的組成與排列提供了一個不可或缺的機制來增進快取的區域性。我們利用幾個測試程式來做評估，這些測試程式在不同數目的快取關連性來展現快取的效能。在大多數的狀況下，可排程資料流程架構的快取效能皆明顯的比傳統系統還好。
Instruction reference in data flow differs from that of conventional systems. In data flow environments, execution is data driven, hence it depends on data reference. Scheduled data flow is a unique architecture that uses a non-blocking multithread and decoupled access model based on data flow paradigm. The parallel nature found in data flow architectures and the dependence of execution on data cause the dimensional reference patterns more effective and complex than the conventional sequential execution. This research compares the cache performance of such hybrid architecture and the existing conventional architecture. By using non-blocking multithreaded model to divide the program into different code sections, data organizations and layouts provide an essential mechanism to improve the cache locality. Our evaluations, with several small benchmarks, demonstrate that the cache performance using different associativity –in most cases, significantly outperform conventional system.
